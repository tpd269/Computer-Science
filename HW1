# 2a
def shift(lst, k):
    for i in range(k):
        lst.append(lst[0])  # Append the first value in order to shift the list
        del lst[0]  # Delete first value since they are already got moved to the end
    return lst

lst = [1, 2, 3, 4, 5, 6]
print(shift(lst, 2))

# 2b
def shift(lst, k, direction="left"):
    if direction == "right":
        for i in range(k):
            val = lst.pop(len(lst) - 1)  # Store the last value to move it to the front
            lst.insert(0, val)
        return lst

    else:  # direction == "left"
        for i in range(k):
            lst.append(lst[0])
            del lst[0]
        return lst

lst = [1, 2, 3, 4, 5,6]
# print(shift(lst, 2))
print(shift(lst, 2, "right"))

# 3
num = int(input("Please enter a positive integer n:"))
## a


def sum_squares(num):
    sum_num = 0
    for i in range(1, num):
        sum_num += i**2
    return sum_num

print(sum_squares(num))

## b
print(sum([i**2 for i in range(1, num)]))

## c


def sum_odd(num):
    sum_num = 0
    for i in range(1, num):
        if i % 2 != 0:
            sum_num += i**2
    return sum_num

print(sum_odd(num))

## d
print(sum([i**2 for i in range(1, num) if i % 2 != 0]))

# 4
## a
print([10**i for i in range(6)])

## b
print([i*(i+1) for i in range(10)])


## c
print([chr(i) for i in range(97, 123)])
print([chr(x) for x in range(ord("a"), ord("z")+1)])  # Different way to do it

# 5
def fibs(n):
    a = 1
    b = 1
    for i in range(n):
        yield a
        result = a + b
        a = b
        b = result

print(fibs(10))

# 6
class Vector:
    # Represent a vector in a multidimensional space
    def __init__(self, d):
        if isinstance(d, int):
            self.coords = [0] * d  # Create d-dimensional vector of zeros
        else:
            self.coords = d

    def __len__(self):
        return len(self.coords)  # Return the dimension of the vector

    def __getitem__(self, j):
        return self.coords[j]  # Return jth coordinate of vector

    def __setitem__(self, j, val):
        self.coords[j] = val  # Set jth coordinate of vector to given value

    def __add__(self, other):
        # Return sum of two vectors
        if len(self) != len(other):  # Relies on len method
            raise ValueError("dimensions must agree")
        result = Vector(len(self))  # Start with vector of zeros
        for j in range(len(self)):
            result[j] = self[j] + other[j]
        return result

    def __sub__(self, other):  # b
        if len(self) != len(other):
            raise ValueError("dimensions must agree")
        result = Vector(len(self))
        for j in range(len(self)):
            result[j] = self[j] - other[j]
        return result

    def __neg__(self):  # c
        return Vector([-i for i in self.coords])

    def __mul__(self, other):
        # Return scalar product of a vector and an int
        if type(other) == int:
            result = Vector(len(self))  # Access to a vector
            for j in range(len(self)):  # Use for loop to iterate through the vector
                result.coords[j] = self.coords[j] * other
            return result
        else:  # Return dot product of 2 vectors
            if len(self) != len(other):  # Relies on len method
                raise ValueError("dimensions must agree")
            result = 0  # Initialize result = 0
            for j in range(len(self)):  # Use for loop to iterate through each dimension
                result += self[j] * other[j]  # Add the multiplication of 2 vectors' dimension
            return result

    def __rmul__(self, other):
        return self.__mul__(other)

    def __eq__(self, other):
        return self.coords == other.coords  # Return True if vector has same coordinates as other

    def __ne__(self, other):
        return not self == other  # Return True if vector differs from other

    def __str__(self):
        return "<" + str(self.coords)[1:-1] + ">"

    def __repr__(self):
        return str(self)

v1 = Vector(5)
v1[1] = 10
v1[-1] = 10
print(v1)

v2 = Vector([2, 4, 6, 8, 10])
print(v2)

u1 = v1 + v2
print(u1)

u2 = -v2
print(u2)

u3 = 3 * v2
print(u3)

u4 = v2 * 3
print(u4)

u5 = v1 * v2
print(u5)

